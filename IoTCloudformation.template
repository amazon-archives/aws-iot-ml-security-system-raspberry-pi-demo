AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Designer':
    143e5aa7-0d5d-4e7c-9532-07acb45f6907:
      size:
        width: 60
        height: 60
      position:
        x: 770
        'y': 160
      z: 0
      embeds: []
    e79cd9e1-a9ce-4ba8-a39d-4588cff05527:
      size:
        width: 60
        height: 60
      position:
        x: 810
        'y': 260
      z: 0
      embeds: []
    89f3b256-7460-40ac-b07a-dd72f61854cf:
      size:
        width: 60
        height: 60
      position:
        x: 1020
        'y': 240
      z: 0
      embeds: []
      isassociatedwith:
        - db30ef40-ae9b-4b9a-b911-e29c64c4e77e
        - f8e01b5d-5b3e-45e9-808a-ab40f07b59d8
        - 3e789684-179e-47f6-a5d9-0180ace0e97d
      dependson:
        - 143e5aa7-0d5d-4e7c-9532-07acb45f6907
        - e79cd9e1-a9ce-4ba8-a39d-4588cff05527
        - 22c502f1-f7de-46f9-8f6c-6e5403a939ff
    b3fd93ee-ee4f-4b62-bb15-388f092bef20:
      size:
        width: 60
        height: 60
      position:
        x: 890
        'y': 400
      z: 0
      embeds: []
    22c502f1-f7de-46f9-8f6c-6e5403a939ff:
      size:
        width: 60
        height: 60
      position:
        x: 730
        'y': 260
      z: 0
      embeds: []
    db30ef40-ae9b-4b9a-b911-e29c64c4e77e:
      size:
        width: 60
        height: 60
      position:
        x: 1020
        'y': 160
      z: 0
      embeds: []
      dependson:
        - e79cd9e1-a9ce-4ba8-a39d-4588cff05527
        - 22c502f1-f7de-46f9-8f6c-6e5403a939ff
        - 143e5aa7-0d5d-4e7c-9532-07acb45f6907
    f8e01b5d-5b3e-45e9-808a-ab40f07b59d8:
      size:
        width: 60
        height: 60
      position:
        x: 920
        'y': 160
      z: 0
      embeds: []
      isassociatedwith:
        - 89f3b256-7460-40ac-b07a-dd72f61854cf
    3e789684-179e-47f6-a5d9-0180ace0e97d:
      size:
        width: 60
        height: 60
      position:
        x: 1110
        'y': 160
      z: 0
      embeds: []
Resources:
  S3B3YBEZ:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 143e5aa7-0d5d-4e7c-9532-07acb45f6907
  SNST1NYQ0:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref CellPhone
          Protocol: sms
        - Endpoint: !Ref Email
          Protocol: email
      TopicName: MatchNotFound
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e79cd9e1-a9ce-4ba8-a39d-4588cff05527
  SNSTY4Q4:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref CellPhone
          Protocol: sms
        - Endpoint: !Ref Email
          Protocol: email
      TopicName: MatchFound
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 22c502f1-f7de-46f9-8f6c-6e5403a939ff
  IAMMP21UZQ:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: IOTS3ReadOnlyPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource:
              - !Sub 'arn:aws:s3:::${S3B3YBEZ}/*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: db30ef40-ae9b-4b9a-b911-e29c64c4e77e
    DependsOn:
      - S3B3YBEZ
  IAMMP3GSD2:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: IOTSNSPublishPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sns:Publish'
            Resource:
              - !Ref SNST1NYQ0
              - !Ref SNSTY4Q4
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f8e01b5d-5b3e-45e9-808a-ab40f07b59d8
    DependsOn:
      - SNST1NYQ0
      - SNSTY4Q4
  IAMMP533O6:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: IOTRekognitionandCloudwatchPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'rekognition:CompareFaces'
              - 'rekognition:CreateCollection'
              - 'rekognition:DescribeCollection'
              - 'rekognition:DetectFaces'
              - 'rekognition:DetectLabels'
              - 'rekognition:IndexFaces'
              - 'rekognition:ListCollections'
              - 'rekognition:ListFaces'
              - 'rekognition:SearchFaces'
              - 'rekognition:SearchFacesByImage'
              - 'rekognition:StartFaceDetection'
              - 'rekognition:StartFaceSearch'
            Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3e789684-179e-47f6-a5d9-0180ace0e97d
  IAMR30BJR:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref IAMMP21UZQ
        - !Ref IAMMP3GSD2
        - !Ref IAMMP533O6
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 89f3b256-7460-40ac-b07a-dd72f61854cf
    DependsOn: []
  LFSCL7:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: "'\n  import boto3\n  import os\n  \n  BUCKET = os.environ['BUCKET']\n  KEY2 = os.environ['S3_FILE']\n  THRESHOLD = float(os.environ['ACCURACY_THRESHOLD'])\n  COLLECTION = os.environ['COLLECTION']\n  MY_NAME = os.environ['NAME']\n  MY_REGION = os.environ['REGION']\n  MATCH_FOUND = os.environ['MatchFound']\n  MATCH_NOT_FOUND = os.environ['MatchNotFound']\n  rekognition = boto3.client(\"rekognition\", MY_REGION)\n  sns = boto3.client(\"sns\")\n  \n  def printf(text):\n      print(text)\n  \n  def matchfound(record):\n  \n      face = record['Face']\n      similarity = record['Similarity']\n      name = face['ExternalImageId']\n      response = sns.publish(\n              TopicArn = MATCH_FOUND,\n              Message = name +\" just stopped by at your desk. Here is a picture:\\n https://s3.amazonaws.com/\"+ BUCKET +\"/\"+KEY2+\"\\n\"+\"https://s3.amazonaws.com/\"+ BUCKET +\"/badgephoto/\"+name+\".jpg \\n similarity%: \"+format(similarity)+\"\\n\",\n              Subject = MY_NAME +', '+ name +' stopped by at your desk',\n              MessageStructure = 'string',\n      )\n      print(response)\n  \n  \n  def matchnotfound(record):\n  \n      similarity = record['Similarity']\n      response = sns.publish(\n              TopicArn = MATCH_NOT_FOUND,\n              Message = \"someone stopped by at your desk. Here is a picture:\\n https://s3.amazonaws.com/\"+ BUCKET +\"/\"+KEY2+\"\\n\"+\"similarity%: \"+format(similarity)+\"\\n\",\n              Subject = MY_NAME +', someone stopped by at your desk but I dont know who',\n              MessageStructure = 'string',\n      )\n      print(response)\n  \n  \n  \n  def search_faces_by_image(bucket, key, collection_id, threshold=THRESHOLD, region=\"us-east-1\"):\n  \n              response = rekognition.search_faces_by_image(\n                      Image={\n                              \"S3Object\": {\n                                      \"Bucket\": BUCKET,\n                                      \"Name\": KEY2,\n                                      }\n                              },\n                              CollectionId=COLLECTION,\n                              FaceMatchThreshold=THRESHOLD,\n                              )\n              return response['FaceMatches']\n  \n  def printf(text):\n  \tprint(text)\n  \n  def lambda_handler(event, context):\n      print(\"In lambda handler\")\n  \n      for record in search_faces_by_image(BUCKET, KEY2, COLLECTION):\n          face = record['Face']\n          similarity = record['Similarity']\n          printf(\"Matched Face ({}%)\".format(similarity))\n          if similarity > THRESHOLD:\n              print \"  FaceId : {}\".format(face['FaceId'])\n              print \"  ImageId : {}\".format(face['ExternalImageId'])\n              matchfound(record)\n  \n          else:\n              print \"no match found\"\n              matchnotfound(record)\n      return record\n  '\n"
      Role: !GetAtt 
        - IAMR30BJR
        - Arn
      Timeout: 60
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      MemorySize: 128
      Environment:
        Variables:
          NAME: !Ref PersonalName
          COLLECTION: MyCollection
          BUCKET: !Ref S3B3YBEZ
          ACCURACY_THRESHOLD: 80
          MatchFound: !Ref SNSTY4Q4
          MatchNotFound: !Ref SNST1NYQ0
          S3_FILE: images/test.jpg
          REGION: !Ref 'AWS::Region'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b3fd93ee-ee4f-4b62-bb15-388f092bef20
    DependsOn:
      - IAMR30BJR
Parameters:
  BucketName:
    Description: Enter your S3 Bucket Name
    Type: String
  PersonalName:
    Description: What is your Name?
    Type: String
  CellPhone:
    Description: What is your cell phone number?
    Type: String
  Email:
    Description: What is your email?
    Type: String
